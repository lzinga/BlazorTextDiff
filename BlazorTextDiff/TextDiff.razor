@using DiffPlex.DiffBuilder;
@using DiffPlex.DiffBuilder.Model;
@using DiffPlex;
@inject IJSRuntime JSRuntime
@inject ISideBySideDiffBuilder sideBySide
@inject IDiffer differ

<div class="diff-container">
   @if (Header is not null && diff is not null)
   {
      <div class="diff-header">
         @Header(new DiffStats(diff.NewText))
      </div>
   }

   <CascadingValue Value="@CollapseContent" Name="@nameof(CollapseContent)">
      <div class="diff-panes" @ref="pane" style="@(CollapseContent ? $"max-height: {MaxHeight}px; overflow: auto;" : "max-height: auto; overflow: auto;")">
         @if (diff is not null)
         {
            <div class="diff-pane">
               <TextDiffPane Model="diff.OldText" PanePosition="@PanePosition.Left"></TextDiffPane>
            </div>
            <div class="diff-pane">
               <TextDiffPane Model="diff.NewText" PanePosition="@PanePosition.Right"></TextDiffPane>
            </div>
         }
      </div>
   </CascadingValue>
   
   @if (CollapseContent && paneHeight >= MaxHeight)
   {
      <p class="diff-expand-notice">...</p>
   }
</div>

@code {
    /// <summary>
    /// When true, the diff algorithm will ignore case differences when comparing text.
    /// This affects the underlying diff calculation, not just display.
    /// </summary>
    [Parameter] public bool IgnoreCase { get; set; } = false;
    
    /// <summary>
    /// When true, the diff algorithm will ignore whitespace differences when comparing text.
    /// This affects the underlying diff calculation. Note: Visual whitespace highlighting
    /// is still shown for actual changes that are detected.
    /// </summary>
    [Parameter] public bool IgnoreWhiteSpace { get; set; } = false;
    
    [Parameter] public int MaxHeight { get; set; } = 300;
    [Parameter] public bool CollapseContent { get; set; }

    /// <summary>
    /// The text before any changes.
    /// </summary>
    [Parameter] public string? OldText { get; set; }

    /// <summary>
    /// The text after any changes.
    /// </summary>
    [Parameter] public string? NewText { get; set; }
    
    [Parameter] public RenderFragment<DiffStats>? Header { get; set; }

    private SideBySideDiffModel? diff;
    private ElementReference pane;
    private int paneHeight;

   /// <summary>
   /// When parameters set update the component.
   /// </summary>
   protected override async Task OnParametersSetAsync()
   {
      if (!string.IsNullOrEmpty(OldText) || !string.IsNullOrEmpty(NewText))
      {
         // Create differ with the specified options
         var customDiffer = new Differ();
         var customSideBySideBuilder = new SideBySideDiffBuilder(customDiffer);
         
         diff = customSideBySideBuilder.BuildDiffModel(
            OldText ?? string.Empty,
            NewText ?? string.Empty,
            ignoreWhitespace: IgnoreWhiteSpace,
            ignoreCase: IgnoreCase);
      }

      if (pane.Id is not null)
      {
         try
         {
            paneHeight = await JSRuntime.InvokeAsync<int>("blazorTextDiff.getHeight", pane);
         }
         catch (JSException)
         {
            // Handle JS interop exceptions gracefully
            paneHeight = 0;
         }
      }
   }

   /// <summary>
   /// When loaded try to diff if text available.
   /// </summary>
   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
      if (firstRender && pane.Id is not null)
      {
         try
         {
            paneHeight = await JSRuntime.InvokeAsync<int>("blazorTextDiff.getHeight", pane);
            StateHasChanged();
         }
         catch (JSException)
         {
            // Handle JS interop exceptions gracefully
            paneHeight = 0;
         }
      }
   }
}
