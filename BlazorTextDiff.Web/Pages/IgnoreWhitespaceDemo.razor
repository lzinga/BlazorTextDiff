@page "/ignore-whitespace"

<PageTitle>IgnoreWhiteSpace Demo - BlazorTextDiff</PageTitle>

<h1>IgnoreWhiteSpace Feature Demo</h1>
<p>This demo shows how the <code>IgnoreWhiteSpace</code> parameter affects diff comparison when there are spacing and indentation differences.</p>

<div class="mb-3">
    <button type="button" class="btn @(ignoreWhiteSpace ? "btn-warning" : "btn-outline-warning")" @onclick="ToggleIgnoreWhiteSpace">
        @(ignoreWhiteSpace ? "âœ“ Ignore Whitespace Enabled" : "Ignore Whitespace Disabled")
    </button>
</div>

<div class="alert alert-info">
    <strong>Current Mode:</strong> @(ignoreWhiteSpace ? "Whitespace differences (spaces, tabs, line breaks) are ignored in the diff calculation" : "Whitespace differences are detected and highlighted")
</div>

<TextDiff OldText="@whitespaceText1" NewText="@whitespaceText2" IgnoreWhiteSpace="@ignoreWhiteSpace">
    <Header>
        <div style="padding: 12px; margin: 0px; background-color: #f8f9fa; border-bottom: 1px solid #dee2e6;">
            <h6 class="mb-2">Whitespace Sensitivity Comparison</h6>
            <div class="diff-stats-container">
                <span class="diff-stats-badge warning">@($"{context.LineModificationCount} Line Modifications")</span>
                <span class="diff-stats-badge danger">@($"{context.LineDeletionCount} Line Deletions")</span>
                <span class="diff-stats-badge success">@($"{context.LineAdditionCount} Line Additions")</span>
                <span class="diff-stats-badge info">@($"{context.WordModificationCount} Word Modifications")</span>
                <span class="diff-stats-badge warning">@($"{context.WordDeletionCount} Word Deletions")</span>
                <span class="diff-stats-badge success">@($"{context.WordAdditionCount} Word Additions")</span>
            </div>
            <div class="mt-2">
                <small class="text-muted">
                    The text samples below have different indentation, spacing, and line breaks.
                </small>
            </div>
        </div>
    </Header>
</TextDiff>

<h2 class="mt-4">Sample Content Differences</h2>
<div class="row">
    <div class="col-md-6">
        <h5>Original Text</h5>
        <div class="bg-light p-3" style="white-space: pre-wrap; font-family: monospace; font-size: 12px;">@whitespaceText1</div>
    </div>
    <div class="col-md-6">
        <h5>Modified Text</h5>
        <div class="bg-light p-3" style="white-space: pre-wrap; font-family: monospace; font-size: 12px;">@whitespaceText2</div>
    </div>
</div>

<h2 class="mt-4">How It Works</h2>
<div class="row">
    <div class="col-md-6">
        <h5>IgnoreWhiteSpace = false (Default)</h5>
        <ul>
            <li>All whitespace differences are detected</li>
            <li>Changes in indentation, spacing, and line breaks show as modifications</li>
            <li>Precise comparison including formatting</li>
            <li>Useful for code where formatting matters</li>
            <li>Shows tabs vs spaces differences</li>
        </ul>
    </div>
    <div class="col-md-6">
        <h5>IgnoreWhiteSpace = true</h5>
        <ul>
            <li>Whitespace differences are ignored during comparison</li>
            <li>Focus on content changes, not formatting</li>
            <li>Indentation and spacing changes don't show as differences</li>
            <li>Useful for document comparison where formatting is flexible</li>
            <li>Treats "hello world" and "hello    world" as identical</li>
        </ul>
    </div>
</div>

<div class="alert alert-warning mt-4">
    <strong>Note:</strong> The text samples include different types of whitespace:
    <ul class="mb-0 mt-2">
        <li>Different indentation levels (2 spaces vs 4 spaces)</li>
        <li>Tabs vs spaces</li>
        <li>Extra spaces between words</li>
        <li>Different line break patterns</li>
    </ul>
</div>

@code {
    private bool ignoreWhiteSpace = false;

    private readonly string whitespaceText1 = @"function calculateTotal(items) {
  let total = 0;
  for (let item of items) {
    total += item.price * item.quantity;
  }
  return total;
}

const config = {
  apiUrl: 'https://api.example.com',
  timeout: 5000,
  retries: 3
};

// Process data
const data = fetchData();
const result = processData(data);";

    private readonly string whitespaceText2 = @"function calculateTotal(items) {
    let total = 0;
    for (let item of items) {
        total += item.price  *  item.quantity;
    }


    return total;
}

const config = {
	apiUrl: 'https://api.example.com',
	timeout: 5000,
	retries: 3
};

// Process  data
const data =  fetchData();
const result =  processData(data);";

    private void ToggleIgnoreWhiteSpace() => ignoreWhiteSpace = !ignoreWhiteSpace;
}